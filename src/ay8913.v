/* verilator lint_off WIDTH */
`default_nettype none

// NOTE: The original AY-3-819x used (see lvd reverse engineering effort):
// 1) single input clock, but internally two phase clock generated by inverting the input clock,
// 2) asyncronous reset for clearing flip-flops to 0.
//
// However this implementation uses syncronous reset and single edge of the clock.

module ay8913 #(parameter CHANNEL_OUTPUT_BITS = 6,
                parameter  MASTER_OUTPUT_BITS = 7
) (
    input  wire       clk,
    input  wire       rst_n,

    input  wire       write,
    input  wire [3:0] latched_register,
    input  wire [7:0] data,
    input  wire [1:0] master_clock_control,

    // output wire [7:0] master_out,
    output wire       pwm_out
);
    wire reset = ! rst_n;

    reg [$clog2(256)-1:0] clk_counter;
    wire clk_master_strobe = clk_counter[$clog2(256)-1:0] == 0; // div 256, running 64Mhz

    // reg clk_master_strobe;
    // always @(*) begin
    //     case(master_clock_control[1:0])
    //         2'b01:  clk_master_strobe = 1;                                  // no div, counters for tone & noise are always enabled
    //                                                                         // useful to speedup record.py
    //         2'b10:  clk_master_strobe = clk_counter[$clog2(256)-1:0] == 0;  // div 256, running 64Mhz
    //         default:
    //                 clk_master_strobe = clk_counter[$clog2(8)-1:0] == 0;    // div  8, for standard AY-3-819x 
    //                                                                         // running on 1.7 MHz .. 2 MHz frequencies
    //     endcase
    // end

    localparam REGISTERS = 14;
    // reg [7:0] register[REGISTERS-1:0];  // 82 bits are used out of 128
    reg restart_envelope;

    always @(posedge clk) begin
        if (reset) begin
            clk_counter <= 0;
            // for (integer i = 0; i < REGISTERS; i = i + 1)
            //     register[i] <= 0;

            // tone_period_A <= 0;
            // tone_period_B <= 0;
            // tone_period_C <= 0;
            // noise_period  <= 0;
            // tone_disable_A <= 0;
            // tone_disable_B <= 0;
            // tone_disable_C <= 0;
            // noise_disable_A <= 0;
            // noise_disable_B <= 0;
            // noise_disable_C <= 0;
            // envelope_A <= 0;
            // envelope_B <= 0;
            // envelope_C <= 0;
            // amplitude_A <= 0;
            // amplitude_B <= 0;
            // amplitude_C <= 0;
            // envelope_period <= 0;
            // envelope_continue <= 0;
            // envelope_attack <= 0;
            // envelope_alternate <= 0;
            // envelope_hold <= 0;

            restart_envelope <= 0;

        end else begin
            clk_counter <= clk_counter + 1;                 // provides clk_master_strobe for tone, noise and envelope

            if (write) begin
                // assign tone_period_A[11:0] = {register[1][3:0], register[0][7:0]};
                if (         latched_register == 4'd0) begin
                    tone_period_A[7:0]  <= data[7:0];
                end else if (latched_register == 4'd1) begin
                    tone_period_A[11:8] <= data[3:0];

                // assign tone_period_B[11:0] = {register[3][3:0], register[2][7:0]};
                end else if (latched_register == 4'd2) begin
                    tone_period_B[7:0]  <= data[7:0];
                end else if (latched_register == 4'd3) begin
                    tone_period_B[11:8] <= data[3:0];

                // assign tone_period_C[11:0] = {register[5][3:0], register[4][7:0]};
                end else if (latched_register == 4'd4) begin
                    tone_period_C[7:0]  <= data[7:0];
                end else if (latched_register == 4'd5) begin
                    tone_period_C[11:8] <= data[3:0];

                // assign noise_period[4:0]   = register[6][4:0];
                end else if (latched_register == 4'd6) begin
                    noise_period[4:0]   <= data[4:0];

                // assign {noise_disable_C,
                //         noise_disable_B,
                //         noise_disable_A,
                //         tone_disable_C,
                //         tone_disable_B,
                //         tone_disable_A} = register[7][5:0];
                end else if (latched_register == 4'd7) begin
                    noise_disable_C     <= data[5];
                    noise_disable_B     <= data[4];
                    noise_disable_A     <= data[3];
                    tone_disable_C      <= data[2];
                    tone_disable_B      <= data[1];
                    tone_disable_A      <= data[0];

                // assign {envelope_A, amplitude_A[3:0]} = register[ 8][4:0];
                end else if (latched_register == 4'd8) begin
                    envelope_A          <= data[4];
                    amplitude_A[3:0]    <= data[3:0];
                // assign {envelope_B, amplitude_B[3:0]} = register[ 9][4:0];
                end else if (latched_register == 4'd9) begin
                    envelope_B          <= data[4];
                    amplitude_B[3:0]    <= data[3:0];
                // assign {envelope_C, amplitude_C[3:0]} = register[10][4:0];
                end else if (latched_register == 4'd10) begin
                    envelope_C          <= data[4];
                    amplitude_C[3:0]    <= data[3:0];
        
                // assign envelope_period[15:0] = {register[12][7:0], register[11][7:0]};
                end else if (latched_register == 4'd11) begin
                    envelope_period[7:0]  <= data;
                end else if (latched_register == 4'd12) begin
                    envelope_period[15:8] <= data;

                // assign {envelope_continue,
                //         envelope_attack,
                //         envelope_alternate,
                //         envelope_hold} = register[13][3:0];
                end else if (latched_register == 4'd13) begin
                    envelope_continue  <= data[3];
                    envelope_attack    <= data[2];
                    envelope_alternate <= data[1];
                    envelope_hold      <= data[0];

                    restart_envelope   <= 1'b1; // restart envelope, if data is written
                                                // to R13 Envelope Shape register
                                                // NOTE: restart_envelope is held as long as the write cycle,
                                                // which is accurate to the real AY-3-819x
                end
                // register[latched_register] <= data;
            end

            // restart_envelope <= write &&                    // restart envelope, if data is written
            //                     latched_register == 4'd13;  // to R13 Envelope Shape register
            //                     // NOTE: restart_envelope is held as long as the write cycle,
            //                     // which is accurate to the real AY-3-819x
        end
    end

    // AY-3-819x Register Array
    //     7 6 5 4 3 2 1 0
    // R0  x x x x x x x x Channel A Tone Period, Fine Tune
    // R1          x x x x                        Coarse Tune
    // R2  x x x x x x x x Channel B Tone Period, Fine Tune
    // R3          x x x x                        Coarse Tune
    // R4  x x x x x x x x Channel C Tone Period, Fine Tune
    // R5          x x x x                        Coarse Tune
    // R6        x x x x x Noise Period
    // R7      x x x x x x Mixer (signals inverted): Noise /C, /B, /A; Tone /C, /B, /A
    // R8        x x x x x Channel A Amplitude
    // R9        x x x x x Channel B Amplitude
    // R10       x x x x x Channel C Amplitude
    // R11 x x x x x x x x Envelop Period, Fine Tune
    // R12 x x x x x x x x                 Coarse Tune
    // R13         x x x x Envelope Shape / Cycle

    reg [11:0]  tone_period_A, tone_period_B, tone_period_C;
    reg [4:0]   noise_period;
    reg         tone_disable_A, tone_disable_B, tone_disable_C;
    reg         noise_disable_A, noise_disable_B, noise_disable_C;
    reg         envelope_A, envelope_B, envelope_C;
    reg [3:0]   amplitude_A, amplitude_B, amplitude_C;
    reg [15:0]  envelope_period;
    reg         envelope_continue, envelope_attack, envelope_alternate, envelope_hold;

    // wire [11:0]  tone_period_A, tone_period_B, tone_period_C;
    // wire [4:0]   noise_period;
    // wire         tone_disable_A, tone_disable_B, tone_disable_C;
    // wire         noise_disable_A, noise_disable_B, noise_disable_C;
    // wire         envelope_A, envelope_B, envelope_C;
    // wire [3:0]   amplitude_A, amplitude_B, amplitude_C;
    // wire [15:0]  envelope_period;
    // wire         envelope_continue, envelope_attack, envelope_alternate, envelope_hold;

    // assign tone_period_A[11:0] = {register[1][3:0], register[0][7:0]};
    // assign tone_period_B[11:0] = {register[3][3:0], register[2][7:0]};
    // assign tone_period_C[11:0] = {register[5][3:0], register[4][7:0]};
    // assign noise_period[4:0]   = register[6][4:0];
    // assign {noise_disable_C,
    //         noise_disable_B,
    //         noise_disable_A,
    //         tone_disable_C,
    //         tone_disable_B,
    //         tone_disable_A} = register[7][5:0];
    // assign {envelope_A, amplitude_A[3:0]} = register[ 8][4:0];
    // assign {envelope_B, amplitude_B[3:0]} = register[ 9][4:0];
    // assign {envelope_C, amplitude_C[3:0]} = register[10][4:0];
    // assign envelope_period[15:0] = {register[12][7:0], register[11][7:0]};
    // assign {envelope_continue,
    //         envelope_attack,
    //         envelope_alternate,
    //         envelope_hold} = register[13][3:0];


    // Tone, noise & envelope generators
    wire tone_A, tone_B, tone_C, noise;
    tone #(.PERIOD_BITS(12)) tone_A_generator (
        .clk(clk),
        .enable(clk_master_strobe),
        .reset(reset),
        .period(tone_period_A),
        .out(tone_A)
        );
    tone #(.PERIOD_BITS(12)) tone_B_generator (
        .clk(clk),
        .enable(clk_master_strobe),
        .reset(reset),
        .period(tone_period_B),
        .out(tone_B)
        );
    tone #(.PERIOD_BITS(12)) tone_C_generator (
        .clk(clk),
        .enable(clk_master_strobe),
        .reset(reset),
        .period(tone_period_C),
        .out(tone_C)
        );

    noise #(.PERIOD_BITS(5)) noise_generator (
        .clk(clk),
        .enable(clk_master_strobe),
        .reset(reset),
        .period(noise_period),
        .out(noise)
        );

    wire [3:0] envelope; // NOTE: Y2149 envelope outputs 5 bits, but programmable amplitude is only 4 bits!
    envelope #(.PERIOD_BITS(16), .ENVELOPE_BITS(4)) envelope_generator (
        .clk(clk),
        .enable(clk_master_strobe),
        .reset(reset | restart_envelope),
        .continue_(envelope_continue),
        .attack(envelope_attack),
        .alternate(envelope_alternate),
        .hold(envelope_hold),
        .period(envelope_period),
        .out(envelope)
        );

    // FROM https://github.com/mamedev/mame/blob/master/src/devices/sound/ay8910.cpp ay8910_device::sound_stream_update
    // The 8910 has three outputs, each output is the mix of one of the three
    // tone generators and of the (single) noise generator. The two are mixed
    // BEFORE going into the DAC. The formula to mix each channel is:
    // (ToneOn | ToneDisable) & (NoiseOn | NoiseDisable).
    // Note that this means that if both tone and noise are disabled, the output
    // is 1, not 0, and can be modulated changing the volume.
    wire channel_A = (tone_disable_A | tone_A) & (noise_disable_A | noise);
    wire channel_B = (tone_disable_B | tone_B) & (noise_disable_B | noise);
    wire channel_C = (tone_disable_C | tone_C) & (noise_disable_C | noise);


    reg [3:0] volume_A_reg;
    reg [3:0] volume_B_reg;
    reg [3:0] volume_C_reg;
    always @(posedge clk) begin
        if (clk_master_strobe) begin
            volume_A_reg <= channel_A ? (envelope_A ? envelope: amplitude_A) : 4'd0;
            volume_B_reg <= channel_B ? (envelope_B ? envelope: amplitude_B) : 4'd0;
            volume_C_reg <= channel_C ? (envelope_C ? envelope: amplitude_C) : 4'd0;
        end

        if (clk_counter[1:0] == 0)
            pwm_out_reg <= pwm_out_pipe;
        else
            pwm_out_reg <= pwm_out_reg | pwm_out_pipe;
    end

    wire [CHANNEL_OUTPUT_BITS-1:0] master_pipe;
    attenuation #(.VOLUME_BITS(CHANNEL_OUTPUT_BITS)) attenuation_pipe (
        .in(1'b1),
        .control(
            clk_counter[1:0] == 2'b00 ? 4'd0 :
            clk_counter[1:0] == 2'b01 ? volume_A_reg :
            clk_counter[1:0] == 2'b10 ? volume_B_reg :
                                        volume_C_reg),
        .out(master_pipe)
        );
    wire pwm_out_pipe;
    reg pwm_out_reg;
    pwm_ay8913 #(.VALUE_BITS(MASTER_ACCUMULATOR_BITS)) pwm_master_pipe (
        .clk(clk),
        .reset(reset),
        .value({1'b0, master_pipe}),
        .out(pwm_out_pipe)
        );

    // // @TODO: divide master by 3 instead of 2
    localparam MASTER_ACCUMULATOR_BITS = CHANNEL_OUTPUT_BITS + 1;

    // wire [CHANNEL_OUTPUT_BITS-1:0] volume_A, volume_B, volume_C;
    // attenuation #(.VOLUME_BITS(CHANNEL_OUTPUT_BITS)) attenuation_A ( // @TODO: rename to amplitude to match docs
    //     .in(channel_A),
    //     .control(envelope_A ? envelope: amplitude_A),
    //     .out(volume_A)
    //     );
    // attenuation #(.VOLUME_BITS(CHANNEL_OUTPUT_BITS)) attenuation_B (
    //     .in(channel_B),
    //     .control(envelope_B ? envelope: amplitude_B),
    //     .out(volume_B)
    //     );
    // attenuation #(.VOLUME_BITS(CHANNEL_OUTPUT_BITS)) attenuation_C (
    //     .in(channel_C),
    //     .control(envelope_C ? envelope: amplitude_C),
    //     .out(volume_C)
    //     );

    // localparam MASTER_MAX_OUTPUT_VOLUME = {MASTER_OUTPUT_BITS{1'b1}};
    // wire [MASTER_ACCUMULATOR_BITS-1:0] master;
    // wire master_overflow;
    // assign { master_overflow, master } = volume_A + volume_B + volume_C; // sum all channels
    // // assign uo_out[MASTER_OUTPUT_BITS-1:0] = 
    // //     (master_overflow == 0) ? master[MASTER_ACCUMULATOR_BITS-1 -: MASTER_OUTPUT_BITS] :  // pass highest MASTER_OUTPUT_BITS to the DAC output pins
    // //                              MASTER_MAX_OUTPUT_VOLUME;                                  // ALSO prevent value wraparound in the master output

    // // PWM outputs
    // // pwm_ay8913 #(.VALUE_BITS(CHANNEL_OUTPUT_BITS)) pwm_A (
    // //     .clk(clk),
    // //     .reset(reset),
    // //     .value(volume_A),
    // //     .out(uio_out[4])
    // //     );

    // // pwm_ay8913 #(.VALUE_BITS(CHANNEL_OUTPUT_BITS)) pwm_B (
    // //     .clk(clk),
    // //     .reset(reset),
    // //     .value(volume_B),
    // //     .out(uio_out[5])
    // //     );

    // // pwm_ay8913 #(.VALUE_BITS(CHANNEL_OUTPUT_BITS)) pwm_C (
    // //     .clk(clk),
    // //     .reset(reset),
    // //     .value(volume_C),
    // //     .out(uio_out[6])
    // //     );

    // wire pwm_out_old;
    // pwm_ay8913 #(.VALUE_BITS(MASTER_ACCUMULATOR_BITS)) pwm_master (
    //     .clk(clk),
    //     .reset(reset),
    //     .value(master),
    //     .out(pwm_out_old)
    //     );
    
    // assign pwm_out = pwm_out_old;
    assign pwm_out = pwm_out_reg;
    // assign pwm_out = pwm_out_pipe; // TODO: up the volume by x4!
    // assign master_out = 0;

    // assign master_out[7:2] = 0;//master[MASTER_ACCUMULATOR_BITS-1 -: 6];
    // assign master_out[1:0] = 0;
    
endmodule
